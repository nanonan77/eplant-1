// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sketec.Infrastructure.Datas;

namespace Sketec.Application.Migrations
{
    [DbContext(typeof(SketecContext))]
    [Migration("20220109084805_master-activity")]
    partial class masteractivity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityCode")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ActivityEN")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ActivityTH")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MasterActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterActivityTypeId");

                    b.ToTable("MasterActivity");
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityGroup")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<string>("TitleEN")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TitleTH")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterActivityType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityGroup = "A",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 1,
                            TitleEN = "Rental",
                            TitleTH = "ค่าเช่าที่ดิน"
                        },
                        new
                        {
                            Id = 2,
                            ActivityGroup = "B",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 2,
                            TitleEN = "Site Preparation",
                            TitleTH = "การเตรียมพื้นที่ปลูก"
                        },
                        new
                        {
                            Id = 3,
                            ActivityGroup = "C",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 3,
                            TitleEN = "Planting",
                            TitleTH = "การปลูก"
                        },
                        new
                        {
                            Id = 4,
                            ActivityGroup = "D",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 4,
                            TitleEN = "Maintenance",
                            TitleTH = "การดูแล"
                        },
                        new
                        {
                            Id = 5,
                            ActivityGroup = "E",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 5,
                            TitleEN = "Harvesting",
                            TitleTH = "ค่าตัด"
                        },
                        new
                        {
                            Id = 6,
                            ActivityGroup = "F",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 6,
                            TitleEN = "Others",
                            TitleTH = "ค่าบริหารการจัดการ"
                        },
                        new
                        {
                            Id = 7,
                            ActivityGroup = "G",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 7,
                            TitleEN = "Est. Cost (Income)",
                            TitleTH = "รายได้"
                        },
                        new
                        {
                            Id = 8,
                            ActivityGroup = "H",
                            IsActive = true,
                            IsDelete = false,
                            Seq = 8,
                            TitleEN = "Transportation",
                            TitleTH = "ค่าขนส่ง"
                        });
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConfiguratioKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MasterConfiguration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "3",
                            ConfiguratioKey = "Day",
                            IsActive = true,
                            IsDelete = false,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            Code = "1",
                            ConfiguratioKey = "Inflation Rate",
                            IsActive = true,
                            IsDelete = false,
                            Value = "1"
                        },
                        new
                        {
                            Id = 3,
                            Code = "20",
                            ConfiguratioKey = "Incremental Tax Rate1",
                            IsActive = true,
                            IsDelete = false,
                            Value = "20"
                        },
                        new
                        {
                            Id = 4,
                            Code = "2",
                            ConfiguratioKey = "Criteria 1",
                            IsActive = true,
                            IsDelete = false,
                            Value = "2"
                        },
                        new
                        {
                            Id = 5,
                            Code = "12",
                            ConfiguratioKey = "Criteria 2",
                            IsActive = true,
                            IsDelete = false,
                            Value = "12"
                        },
                        new
                        {
                            Id = 6,
                            Code = "2",
                            ConfiguratioKey = "Criteria 3",
                            IsActive = true,
                            IsDelete = false,
                            Value = "2"
                        },
                        new
                        {
                            Id = 7,
                            Code = "Rental",
                            ConfiguratioKey = "Contract Type",
                            Description = "Rental",
                            IsActive = true,
                            IsDelete = false,
                            Value = "Rental"
                        },
                        new
                        {
                            Id = 8,
                            Code = "MOU",
                            ConfiguratioKey = "Contract Type",
                            Description = "MOU",
                            IsActive = true,
                            IsDelete = false,
                            Value = "MOU"
                        },
                        new
                        {
                            Id = 9,
                            Code = "VIP",
                            ConfiguratioKey = "Contract Type",
                            Description = "VIP",
                            IsActive = true,
                            IsDelete = false,
                            Value = "VIP"
                        },
                        new
                        {
                            Id = 10,
                            Code = "1",
                            ConfiguratioKey = "Status Tracking",
                            Description = "Submitted",
                            IsActive = true,
                            IsDelete = false,
                            Value = "Submitted"
                        },
                        new
                        {
                            Id = 11,
                            Code = "2",
                            ConfiguratioKey = "Status Tracking",
                            Description = "Verify Cost",
                            IsActive = true,
                            IsDelete = false,
                            Value = "Verify Cost"
                        },
                        new
                        {
                            Id = 12,
                            Code = "3",
                            ConfiguratioKey = "Status Tracking",
                            Description = "Verify Feas.",
                            IsActive = true,
                            IsDelete = false,
                            Value = "Verify Feas."
                        },
                        new
                        {
                            Id = 13,
                            Code = "4",
                            ConfiguratioKey = "Status Tracking",
                            Description = "Final Negotiate",
                            IsActive = true,
                            IsDelete = false,
                            Value = "Final Negotiate"
                        },
                        new
                        {
                            Id = 14,
                            Code = "5",
                            ConfiguratioKey = "Status Tracking",
                            Description = "Contract Signed",
                            IsActive = true,
                            IsDelete = false,
                            Value = "Contract Signed"
                        },
                        new
                        {
                            Id = 15,
                            Code = "6",
                            ConfiguratioKey = "Status Tracking",
                            Description = "Completed",
                            IsActive = true,
                            IsDelete = false,
                            Value = "Completed"
                        });
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterTransportationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MasterTransportationHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(22, 2)
                        .HasColumnType("decimal(22,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterTransportationHeaderId");

                    b.ToTable("MasterTransportationDetail");
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterTransportationHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FreightMax")
                        .HasPrecision(22, 2)
                        .HasColumnType("decimal(22,2)");

                    b.Property<decimal?>("FreightMin")
                        .HasPrecision(22, 2)
                        .HasColumnType("decimal(22,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TruckType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterTransportationHeader");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterActivity", b =>
                {
                    b.HasOne("Sketec.Core.Domains.MasterActivityType", "MasterActivityType")
                        .WithMany()
                        .HasForeignKey("MasterActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterActivityType");
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterTransportationDetail", b =>
                {
                    b.HasOne("Sketec.Core.Domains.MasterTransportationHeader", "MasterTransportationHeader")
                        .WithMany("MasterTransportationDetails")
                        .HasForeignKey("MasterTransportationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTransportationHeader");
                });

            modelBuilder.Entity("Sketec.Core.Domains.MasterTransportationHeader", b =>
                {
                    b.Navigation("MasterTransportationDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
